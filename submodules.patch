Submodule packages/fontkit contains modified content
diff --git a/packages/fontkit/package.json b/packages/fontkit/package.json
index ac40182..5834538 100644
--- a/packages/fontkit/package.json
+++ b/packages/fontkit/package.json
@@ -76,7 +76,7 @@
     "url": "git://github.com/foliojs/fontkit.git"
   },
   "dependencies": {
-    "@swc/helpers": "^0.4.2",
+    "@swc/helpers": "^0.5.0",
     "brotli": "^1.3.2",
     "clone": "^2.1.2",
     "dfa": "^1.2.0",
diff --git a/packages/fontkit/src/CmapProcessor.js b/packages/fontkit/src/CmapProcessor.js
index 6acc501..dd560d2 100644
--- a/packages/fontkit/src/CmapProcessor.js
+++ b/packages/fontkit/src/CmapProcessor.js
@@ -1,5 +1,5 @@
 import { binarySearch } from './utils';
-import { encodingExists, getEncoding, getEncodingMapping } from './encodings';
+import { getEncoding, getEncodingMapping } from './encodings';
 import { cache } from './decorators';
 import { range } from './utils';
 
diff --git a/packages/fontkit/src/opentype/shapers/IndicShaper.js b/packages/fontkit/src/opentype/shapers/IndicShaper.js
index 104198c..4d3f5a6 100644
--- a/packages/fontkit/src/opentype/shapers/IndicShaper.js
+++ b/packages/fontkit/src/opentype/shapers/IndicShaper.js
@@ -897,8 +897,12 @@ function finalReordering(font, glyphs, plan) {
     }
 
     // Apply 'init' to the Left Matra if it's a word start.
-    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(getCategory(glyphs[start - 1].codePoints[0])))) {
+    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn|Mc|Lo/.test(getCategory(glyphs[start - 1].codePoints[0])))) {
       glyphs[start].features.init = true;
     }
   }
 }
Submodule packages/jsPDF contains modified content
diff --git a/packages/jsPDF/package.json b/packages/jsPDF/package.json
index 14c7eebf..7e8786b9 100644
--- a/packages/jsPDF/package.json
+++ b/packages/jsPDF/package.json
@@ -86,7 +86,8 @@
     "rollup-plugin-preprocess": "0.0.4",
     "rollup-plugin-terser": "^6.1.0",
     "typescript": "^3.9.6",
-    "yarpm": "^0.2.1"
+    "yarpm": "^0.2.1",
+    "fontkit": "workspace:*"
   },
   "scripts": {
     "start": "ws",
diff --git a/packages/jsPDF/src/modules/ttfsupport.js b/packages/jsPDF/src/modules/ttfsupport.js
index 06d139ff..eaa66e9c 100644
--- a/packages/jsPDF/src/modules/ttfsupport.js
+++ b/packages/jsPDF/src/modules/ttfsupport.js
@@ -6,6 +6,7 @@
 
 import { jsPDF } from "../jspdf.js";
 import { atob } from "../libs/AtobBtoa.js";
+import { create } from "fontkit";
 
 /**
  * @name ttfsupport
@@ -31,6 +32,7 @@ import { atob } from "../libs/AtobBtoa.js";
       file = binaryStringToUint8Array(atob(file));
     }
     font.metadata = jsPDF.API.TTFFont.open(file);
+    font.metadata.fontkit = create(file);
     font.metadata.Unicode = font.metadata.Unicode || {
       encoding: {},
       kerning: {},
diff --git a/packages/jsPDF/src/modules/utf8.js b/packages/jsPDF/src/modules/utf8.js
index 91ce1285..34583f27 100644
--- a/packages/jsPDF/src/modules/utf8.js
+++ b/packages/jsPDF/src/modules/utf8.js
@@ -18,36 +18,42 @@ import { toPDFName } from "../libs/pdfname.js";
     var widths = font.metadata.Unicode.widths;
     var padz = ["", "0", "00", "000", "0000"];
     var ar = [""];
-    for (var i = 0, l = text.length, t; i < l; ++i) {
-      t = font.metadata.characterToGlyph(text.charCodeAt(i));
-      font.metadata.glyIdsUsed.push(t);
-      font.metadata.toUnicode[t] = text.charCodeAt(i);
-      if (widths.indexOf(t) == -1) {
-        widths.push(t);
-        widths.push([parseInt(font.metadata.widthOfGlyph(t), 10)]);
+    var glyphRun = font.metadata.fontkit.layout(text);
+
+    for (var i = 0, l = glyphRun.glyphs.length; i < l; ++i) {
+      var glyph_ = glyphRun.glyphs[i];
+      font.metadata.glyIdsUsed.push(glyph_.id);
+      font.metadata.toUnicode[glyph_.id] = glyph_.codePoints;
+      if (widths.indexOf(glyph_.id) == -1) {
+        widths.push(glyph_.id);
+        widths.push([parseInt(font.metadata.widthOfGlyph(glyph_.id), 10)]);
       }
-      if (t == "0") {
+      if (glyph_.id == 0) {
         //Spaces are not allowed in cmap.
         return ar.join("");
       } else {
-        t = t.toString(16);
-        ar.push(padz[4 - t.length], t);
+        var glyphHex = glyph_.id.toString(16);
+        ar.push(padz[4 - glyphHex.length], glyphHex);
       }
     }
-    return ar.join("");
+  return ar.join("");
   });
 
-  var toUnicodeCmap = function(map) {
-    var code, codes, range, unicode, unicodeMap, _i, _len;
+  var toUnicodeCmap = function (map) {
+    var glyphIdHex, unicodeHex, range, unicodeMap, _i, _len, range_multiUnicode;
     unicodeMap =
       "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange";
-    codes = Object.keys(map).sort(function(a, b) {
-      return a - b;
-    });
-
+    var glyphIds = Object.keys(map)
+      .sort(function (a, b) {
+        return a - b;
+      })
+      .map(function (a) {
+        return parseInt(a, 10);
+      });
     range = [];
-    for (_i = 0, _len = codes.length; _i < _len; _i++) {
-      code = codes[_i];
+    range_multiUnicode = [];
+    for (_i = 0, _len = glyphIds.length; _i < _len; _i++) {
+      var glyphId = glyphIds[_i];
       if (range.length >= 100) {
         unicodeMap +=
           "\n" +
@@ -57,15 +63,40 @@ import { toPDFName } from "../libs/pdfname.js";
           "\nendbfchar";
         range = [];
       }
-
-      if (
-        map[code] !== undefined &&
-        map[code] !== null &&
-        typeof map[code].toString === "function"
+      if (range_multiUnicode.length >= 100) {
+        unicodeMap +=
+          "\n" +
+          range_multiUnicode.length +
+          " beginbfrange\n" +
+          range_multiUnicode.join("\n") +
+          "\nendbfrange";
+        range_multiUnicode = [];
+      }
+      if (Array.isArray(map[glyphId])) {
+        var accu = "";
+        var unicodeValues = map[glyphId];
+        if (unicodeValues.length > 1) {
+          unicodeValues.forEach(function (unicodeValue) {
+            accu += ("0000" + unicodeValue.toString(16)).slice(-4);
+          });
+          // https://blog.1a23.com/2017/08/29/obfuscate-pdf-text-uncopiable-text-with-crafted-cmap/
+          glyphIdHex = ("0000" + (+glyphId).toString(16)).slice(-4);
+          range_multiUnicode.push(
+            "<" + glyphIdHex + "><" + glyphIdHex + ">[<" + accu + ">]",
+          );
+        } else if (unicodeValues.length === 1) {
+          unicodeHex = ("0000" + unicodeValues[0].toString(16)).slice(-4);
+          glyphIdHex = ("0000" + (+glyphId).toString(16)).slice(-4);
+          range.push("<" + glyphIdHex + "><" + unicodeHex + ">");
+        }
+      } else if (
+        map[glyphId] !== undefined &&
+        map[glyphId] !== null &&
+        typeof map[glyphId].toString === "function"
       ) {
-        unicode = ("0000" + map[code].toString(16)).slice(-4);
-        code = ("0000" + (+code).toString(16)).slice(-4);
-        range.push("<" + code + "><" + unicode + ">");
+        unicodeHex = ("0000" + map[glyphId].toString(16)).slice(-4);
+        glyphIdHex = ("0000" + (+glyphId).toString(16)).slice(-4);
+        range.push("<" + glyphIdHex + "><" + unicodeHex + ">");
       }
     }
 
@@ -77,6 +108,14 @@ import { toPDFName } from "../libs/pdfname.js";
         range.join("\n") +
         "\nendbfchar\n";
     }
+    if (range_multiUnicode.length) {
+      unicodeMap +=
+        "\n" +
+        range_multiUnicode.length +
+        " beginbfrange\n" +
+        range_multiUnicode.join("\n") +
+        "\nendbfrange\n";
+    }
     unicodeMap +=
       "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
     return unicodeMap;
